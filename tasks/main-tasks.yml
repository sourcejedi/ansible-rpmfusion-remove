- name: Check variable <repo> - "free" or "nonfree"
  assert:
    that:
      - repo is defined
      - repo == "free" or repo == "nonfree"

- name: Check OS is Fedora
  assert:
    that: ansible_distribution == 'Fedora'

# If the repo has already been removed,
# then attempting to operate on it will fail
- name: Check for RPM Fusion repo
  stat:
    path: /etc/yum.repos.d/rpmfusion-{{ repo }}.repo
  register: repo_file

# In other roles I have used a three-step process for accurate results
# despite using command / shell tasks:
#
# 1/3) Query condition
# 2/3) Run command task conditionally, to provide accurate "changed" status
# 3/3) The condition must now hold.  This "fixes" ansible check mode.
#
# The limitation is that step 3) really just tells the user that check mode
# has failed (if a change is needed), and that this sequence is one of those
# that check mode doesn't work for.
#
# However it's not good for this role.  If someone removes both repos,
# I really want to show them the packages that would be removed from
# *both* repos.
#
# Ansible would really benefit if modules were easier to write :(.
# The alternative solution here, is to fake the "changed" status
# on a different task.  It works well, apart from the potential
# for confusion about the fake "changed" status.
#
# The "debug" module does not permit faking a changed status.
# "ping" does though.  (Tested: Ansible 2.4.0).

# 1/3 Query condition
- name: query  | Are there RPM Fusion packages to be removed?
  command: dnf repo-pkgs rpmfusion-{{ repo }} list installed
  check_mode: False
  changed_when: False
  when: repo_file.stat.exists
  register: list_installed  # Note stdout is a table; the first line is a header

# 2/3 Fake "changed" status for check mode.
- name: report | Yes, there are RPM Fusion packages to be removed from this system
  ping:
  when: repo_file.stat.exists and list_installed.stdout_lines[1:]
  changed_when: True

- name: NOTICE | THE FOLLOWING PACKAGES FROM THIS REPO WILL BE REMOVED
  debug:
    var: "[ repo, list_installed.stdout_lines[1:] ]"
  when: repo_file.stat.exists and list_installed.stdout_lines[1:]

# 3/3) Run command task conditionally, to provide accurate "changed" status
- name: ensure | RPM Fusion packages are removed
  command: dnf -y repo-pkgs rpmfusion-{{ repo }} remove
  when: repo_file.stat.exists and list_installed.stdout_lines[1:]


- name: Remove rpmfusion release RPM
  package:
    name: rpmfusion-{{ repo }}-release
    state: absent


# Remove keys by description.  This gets ugly.
# But I don't know whether we're guaranteed to know all the installed RPM Fusion key IDs.
# rpmfusion_install.yml includes a check that the description matches what we expect.

# 1/3) Query condition
- name: query  | Are there RPM Fusion signing keys to be removed?
  shell: rpm -qa gpg-pubkey --qf "gpg-pubkey-%{version}-%{release} %{summary}\n" | grep "RPM Fusion {{ repo }}.*\<.*\.rpmfusion\.org\>" | cut -d " " -f 1
  check_mode: False
  changed_when: False
  register: list_installed_keys
  failed_when: list_installed_keys.rc != 0 or list_installed_keys.stderr != ""

# 2/3) Fake "changed" status for check mode.
- name: report | Yes, there are RPM Fusion signing keys to be removed
  ping:
  when: list_installed_keys.stdout_lines
  changed_when: True

# 3/3) Run command task conditionally, to provide accurate "changed" status
#
# (If you try to use rpm_keys module instead to remove keys,
# it fails with "package gpg-pubkey- is not installed".  Ansible 2.4.0).
- name: ensure | RPM Fusion signing keys are removed
  command: rpm -e --allmatches {{ item }}
  with_items: "{{ list_installed_keys.stdout_lines }}"

